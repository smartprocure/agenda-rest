!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define("./dist/test",[],o):"object"==typeof exports?exports["./dist/test"]=o():e["./dist/test"]=o()}(global,(()=>(()=>{"use strict";var e={560:(e,o,t)=>{t.r(o),t.d(o,{agenda:()=>x,app:()=>v,default:()=>D,jobsReady:()=>q,router:()=>g});var a=t(837);const s=require("agenda");var n=t.n(s);const r=require("../settings");var i=t.n(r),c=t(882);const d=require("request-promise");var p=t.n(d);const u=(e,o={})=>t=>{if(!t.name||e&&!t[e])throw new Error(`expected request body to match {name${e?`, ${e}`:""}}`);return{...o,...t}},l=(e,o)=>(t,a)=>a.countDocuments({name:t.name}).then((a=>{if(!e(a))throw new Error(o(t.name))})),b={alreadyExists:l((e=>e>0),(e=>`Did not find a job named "${e}"`)),notExists:l((e=>e<=0),(e=>`A job named "${e}" already exist`)),doNotAssert:()=>!0},m=async(e,o,t)=>{const{name:a,url:s,method:n,callback:r}=e;return t.define(a,((e,o)=>{const{attrs:{data:t}}=e;let a=(0,c.Ln)({url:s,params:t.params});a=(0,c.CB)({url:a,query:t.query});const d={method:n||"POST",uri:a,body:t.body,headers:t.headers||{},json:!0};Promise.race([new Promise(((e,o)=>setTimeout((()=>o(new Error("TimeOutError"))),i().timeout))),p()(d)]).catch((o=>(e.fail(`options: ${JSON.stringify(d)} message: ${o.message}`),{error:o.message}))).then((e=>{if(r)return p()({method:r.method||"POST",uri:r.url,headers:r.headers||{},body:{data:t,response:e},json:!0})})).catch((o=>e.fail(`failure in callback: ${o.message}`))).then((()=>o()))})),await o.countDocuments({name:a}).then((t=>t<1?o.insertOne(e):o.updateOne({name:a},{$set:e}))),"job defined"},y=({obj:e,pickProps:o})=>o.reduce(((o,t)=>e[t]?[...o,e[t]]:o),[]),f={now:{fn:e=>e.now.bind(e),message:"for now",getParams:e=>y({obj:e,pickProps:["name","data"]})},once:{fn:e=>e.schedule.bind(e),message:"for once",getParams:e=>{let o=parseInt(e.interval,10);return o=isNaN(o)?e.interval:o,o=new Date(o),o=(0,c.qb)(o)?o:e.interval,y({obj:{...e,time:o},pickProps:["time","name","data"]})}},every:{fn:e=>e.every.bind(e),message:"for repetition",getParams:e=>y({obj:e,pickProps:["interval","name","data","options"]})}},j=e=>async(o,t,a)=>(await e.fn(a)(...e.getParams(o)),`job scheduled ${e.message}`),h=(e,o)=>({check:e,fn:o}),w={create:h(u("url"),m),update:h(u(),m),delete:h(u(),(async(e,o,t)=>{const a=await t.cancel(e),s=await o.remove(e);return`removed ${s.result?s.result.n:"N/A"} job definitions and ${a} job instances.`})),cancel:h((e=>e),(async(e,o,t)=>`${await t.cancel(e)} jobs canceled`)),now:h(u(!1,{data:{body:{},params:{},query:{}}}),j(f.now)),once:h(u("interval",{data:{body:{},params:{},query:{}}}),j(f.once)),every:h(u("interval",{data:{body:{},params:{},query:{}}}),j(f.every))},{app:v,router:g}=(0,c.h$)(),x=new(n())({db:{address:i().agendaMongoUrl,collection:i().collection?i().collection:void 0},...i().agenda}),q=x._ready.then((async()=>{const e=x._mdb.collection(i().definitions);return e.toArray=()=>{const o=e.find();return(0,a.promisify)(o.toArray).bind(o)()},await e.toArray().then((o=>Promise.all(o.map((o=>m(o,e,x)))))),await x.start(),e})),P=(e,o,t=400)=>async(a,s)=>{i().appId&&a.request.headers["x-api-key"]!==i().appId&&a.throw(403,"Forbidden");const n=a.request.body||{};a.params.jobName&&(n.name=a.params.jobName);const r=await q;a.body=await(async(e,o,t,a,s)=>(e=await s.check(e),await a(e,o),s.fn(e,o,t)))(n,r,x,e,o).catch((e=>a.throw(t,e))),await s()},$=P(b.notExists,w.create),O=P(b.alreadyExists,w.delete),k=P(b.alreadyExists,w.update),T=P(b.alreadyExists,w.once),E=P(b.alreadyExists,w.every),N=P(b.alreadyExists,w.now),S=P(b.doNotAssert,w.cancel);g.get("/api/job",(async(e,o)=>{i().appId&&e.request.headers["x-api-key"]!==i().appId&&e.throw(403,"Forbidden"),e.body=await q.then((e=>e.toArray())),await o()})),g.post("/api/job",$),g.del("/api/job/:jobName",O),g.put("/api/job/:jobName",k),g.post("/api/job/once",T),g.post("/api/job/every",E),g.post("/api/job/now",N),g.post("/api/job/cancel",S);const A=(e,o=307)=>async(t,a)=>{t.status=o,t.redirect(e),await a()};g.get("/api/v1/job",A("/api/job")),g.post("/api/v1/job",A("/api/job")),g.del("/api/v1/job/:jobName",A("/api/job/:jobName")),g.put("/api/v1/job/:jobName",A("/api/job/:jobName")),g.post("/api/v1/job/once",A("/api/job/once")),g.post("/api/v1/job/every",A("/api/job/every")),g.post("/api/v1/job/now",A("/api/job/now")),g.post("/api/v1/job/cancel",A("/api/job/cancel"));const D=v},882:(e,o,t)=>{t.d(o,{hW:()=>j,h$:()=>m,Ln:()=>h,CB:()=>w,qb:()=>y,KE:()=>f});const a=require("koa");var s=t.n(a);const n=require("koa-logger");var r=t.n(n);const i=require("koa-router");var c=t.n(i);const d=require("koa-bodyparser");var p=t.n(d);const u=require("pythonic"),l=require("querystring");var b=t.n(l);const m=()=>{const e=new(s()),o=new(c());return e.use(r()()),e.use(((e,o)=>o().catch((o=>{console.dir(o),e.body=String(o),e.status=o.status||500})))),e.use(p()({onerror(e,o){o.throw(400,`cannot parse request body, ${JSON.stringify(e)}`)}})),e.use(o.routes()),{app:e,router:o}},y=e=>"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime()),f=((e={})=>o=>(t,a)=>()=>{t in e||(e[t]=0),e[t]<o&&(a(),e[t]++)})()(1);class j{constructor(e){let o=0;this.countTimes=e,this.ready=new Promise((t=>{this.finished=new Promise((a=>{this.count=()=>this.ready.then((()=>(o++,o===e&&a(),o))),t()}))}))}}const h=({url:e,params:o})=>{if(e.indexOf("/:")>0&&o){const t=e.slice(0,e.indexOf("/:"));let a=e.slice(e.indexOf("/:"));for(const[e,t]of(0,u.items)(o))a=a.replace(`:${e}`,t);return`${t}${a}`}return e},w=({url:e,query:o})=>(o&&""!==(o=b().stringify(o))&&(e+=`?${o}`),e)},837:e=>{e.exports=require("util")}},o={};function t(a){var s=o[a];if(void 0!==s)return s.exports;var n=o[a]={exports:{}};return e[a](n,n.exports,t),n.exports}t.n=e=>{var o=e&&e.__esModule?()=>e.default:()=>e;return t.d(o,{a:o}),o},t.d=(e,o)=>{for(var a in o)t.o(o,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:o[a]})},t.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var a={};return(()=>{t.r(a);var e=t(837);const o=require("ava");var s=t.n(o);const n=require("supertest");var r=t.n(n),i=t(882);const c="http://localhost:4042",{app:d,router:p}=(0,i.h$)(),u=e=>e?`${c}${e}`:c,l=r()("http://localhost:4041");s().before((()=>(async()=>{const{app:o,jobsReady:a}=t(560);await(0,e.promisify)(o.listen).bind(o)(4041).then((()=>console.log("agenda-rest app running"))),await(0,e.promisify)(d.listen).bind(d)(4042).then((()=>console.log("test app running"))),await a})())),s().serial("POST /api/job fails without content",(async e=>{const o=await l.post("/api/job").send();e.is(o.status,400)})),s().serial("POST /api/job succeeds when a job is specified",(async e=>{const o=await l.post("/api/job").send({name:"foo",url:u("/fooWrong")});e.is(o.status,200)})),s().serial("PUT /api/job fails when the job does not exists",(async e=>{const o=await l.put("/api/job/fooWrong").send({url:u("/foo")});e.is(o.status,400)})),s().serial("PUT /api/job succeeds when the job exists",(async e=>{const o=await l.put("/api/job/foo").send({url:u("/foo")});e.is(o.status,200)}));const b={},m=(e,o,t=1,a=200)=>{const s=new i.hW(t);return b.counter=s,b.message=o,b.statusCode=a,(0,i.KE)(e,(()=>p.post(e,(async(e,o)=>{e.body=b.message,e.status=b.statusCode,console.log(`${b.message}! ${await b.counter.count()} of ${b.counter.countTimes}`),await o()}))))(),s};s().serial("POST /api/job/now with existing foo definition invokes the foo endpoint",(async e=>{const o=m("/foo","foo now invoked"),t=await l.post("/api/job/now").send({name:"foo"});e.is(t.text,"job scheduled for now"),await o.finished})),s().serial("POST /api/job/every with existing foo definition invokes the foo endpoint",(async e=>{const o=m("/foo","foo every invoked",3),t=await l.post("/api/job/every").send({name:"foo",interval:"2 seconds"});e.is(t.text,"job scheduled for repetition"),await o.finished})),s().serial("POST /api/job/once with existing foo definition invokes the foo endpoint",(async e=>{const o=m("/foo","foo once invoked"),t=await l.post("/api/job/once").send({name:"foo",interval:(new Date).getTime()+1e4});e.is(t.text,"job scheduled for once"),await o.finished})),s().serial("DELETE /api/job succeeds when a job is defined",(async e=>{const o=await l.delete("/api/job/foo");e.is(o.status,200)})),s()("Build URL with parameters.",(e=>{e.is((0,i.Ln)({url:"http://example.com:8888/foo/:param1/:param2",params:{param1:"value1",param2:"value2"}}),"http://example.com:8888/foo/value1/value2")})),s()("Build URL with query.",(e=>{e.is((0,i.CB)({url:"http://example.com/foo",query:{query1:"value1",query2:"value2"}}),"http://example.com/foo?query1=value1&query2=value2")}))})(),a})()));
//# sourceMappingURL=test.js.map